# # copied from autogenerated SnoopCompile files, precompiling only those
# # modules that occur after the initial call to Weber.__init__
_precompile_() = nothing
# function _precompile_()
#   ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
#   precompile(Base.resize!, (Array{Union{Symbol, Array{Symbol, 1}}, 1}, Int64,))
#   precompile(Base._delete!, (Base.Dict{Symbol, Any}, Int64,))
#   precompile(Base.resize!, (Array{Array{Symbol, 1}, 1}, Int64,))
#   precompile(Base.mod, (Array{Int64, 1}, Int64,))
#   precompile(Base.finalizer, (Any, Any,))
#   precompile(Base.div, (Array{Int64, 1}, Int64,))
#   precompile(Base._setindex!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Symbol, String, Int64,))
#   precompile(Base.Libdl.dlsym, (Ptr{Void}, Symbol,))
#   precompile(Base.ht_keyindex, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, String,))
#   precompile(Base.ht_keyindex, (Base.Dict{Symbol, Array{Symbol, 1}}, Symbol,))
#   precompile(Base.ht_keyindex, (Base.Dict{String, DataType}, String,))
#   precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Tuple{Int64},))
#   precompile(Base.trunc, (Type{Int32}, Float64,))
#   precompile(Base.finalizer, (Any, Any,))
#   precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{Any, 1},))
#   precompile(Base.rat, (Float64,))
#   precompile(Base._jl_spawn, (String, Array{String, 1}, Ptr{Void}, Base.Process, Base.PipeEndpoint, Base.TTY, Base.TTY,))
#   precompile(Base.Serializer.should_send_whole_type, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
#   precompile(Base.Libc.Type, (Type{Base.Libc.TimeVal},))
#   precompile(Base.shift!, (Array{Symbol, 1},))
#   precompile(Base.stride, (Array{Any, 1}, Int64,))
#   precompile(Base.resize!, (Array{Tuple{String, Int64}, 1}, Int64,))
#   precompile(Base.Type, (Type{Base.Timer}, Int64, Float64,))
#   precompile(Base.collect_to!, (Array{Void, 1}, Base.Generator{Array{Base.StackTraces.StackFrame, 1},typeof( Base.println)}, Int64, Int64,))
#   precompile(Base.throw_setindex_mismatch, (Array{Int64, 1}, Tuple{Int64},))
#   precompile(Base.skip_deleted, (Base.Dict{AbstractString, Any}, Int64,))
#   precompile(Base.task_done_hook, (Task,))
#   precompile(Base.write, (Base.Pipe, Array{UInt8, 1},))
#   precompile(Base.trunc, (Type{Int16}, Float64,))
#   precompile(Base.isequal, (Tuple{String, Int64}, Tuple{String, Int64},))
#   precompile(Base.Type, (Type{Base.Process}, Base.Cmd, Ptr{Void}, Base.Pipe, Base.TTY, Base.TTY,))
#   precompile(Base.splice!, (Array{Any, 1}, Int64, Array{Any, 1},))
#   precompile(Base.Serializer.serialize_cycle, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
#   precompile(Base.first, (Base.Take{Base.Repeated{Array{Any, 1}}},))
#   precompile(Base.wait_readbyte, (Base.PipeEndpoint, UInt8,))
#   precompile(Base.flipdim, (Array{Int64, 1}, Int64,))
#   precompile(Base.colon, (Float64, Float64, Float64,))
#   precompile(Base.Dates.year, (Int64,))
#   precompile(Base.Serializer.serialize_type, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
#   precompile(Base.arg_gen, (String, String,))
#   precompile(Base.Broadcast._bcs1, (Base.OneTo{Int64}, Base.OneTo{Int64},))
#   precompile(Base.Dates.month, (Int64,))
#   precompile(Base.copy!, (Array{Any, 1}, Int64, Array{Base.VersionNumber, 1}, Int64, Int64,))
#   precompile(Base._setindex!, (Base.Dict{Symbol, Any}, Tuple{Tuple{UInt8, UInt8, UInt8, UInt8}, String}, Symbol, Int64,))
#   precompile(Base._setindex!, (Base.Dict{Symbol, Any}, Tuple{Tuple{UInt8, UInt8, UInt8, UInt8}, Array{String, 1}}, Symbol, Int64,))
#   precompile(Base.rehash!, (Base.Dict{Symbol, Array{Symbol, 1}}, Int64,))
#   precompile(Base.Math.sin, (Float64,))
#   precompile(Base.rehash!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Int64,))
#   precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Tuple{Symbol, UInt64},))
#   precompile(Base.nextpow2, (Int64,))
#   precompile(Base.open, (Base.CmdRedirect, String, Base.TTY,))
#   precompile(Base._setindex!, (Base.Dict{Symbol, Any}, Int64, Symbol, Int64,))
#   precompile(Base.Type, (Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Int64}},))
#   precompile(Base.Type, (Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}},))
#   precompile(Base.Dates.minute, (Base.Dates.DateTime,))
#   precompile(Base.Dates.day, (Int64,))
#   precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{String, 1},))
#   precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, SimpleVector,))
#   precompile(Base.trunc, (Type{UInt32}, Float64,))
#   precompile(Base.linspace, (Float64, Float64, Float64,))
#   precompile(Base.Serializer.serialize_any, (Base.Serializer.SerializationState{Base.Pipe}, Any,))
#   precompile(Base.unsafe_write, (Base.Pipe, Base.RefValue{UInt64}, Int64,))
#   precompile(Base.show, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, TypeName,))
#   precompile(Base.gcd, (Int64, Int64,))
#   precompile(Base.ht_keyindex, (Base.Dict{Int64, String}, Int64,))
#   precompile(Base.ht_keyindex, (Base.Dict{String, Int32}, String,))
# precompile(Base.Math.frexp, (Float64,))
# precompile(Base.with_output_color, (Function, Symbol, Base.TTY, String,))
# precompile(Base.unpreserve_handle, (Base.Timer,))
# precompile(Base._length, (Array{Float64, 2},))
# precompile(Base.collect_to!, (Array{Float64, 1}, Base.Generator{Base.LinSpace{Float64},typeof( Base.sin)}, Int64, Int64,))
# precompile(Base.notify, (Base.Condition, Base.EOFError, Bool, Bool,))
# precompile(Base.Math.cos, (Float64,))
# precompile(Base.ht_keyindex, (Base.Dict{String, Base.Dict{Int64, String}}, String,))
# precompile(Base.vcat, (Array{Int64, 1}, Array{Int64, 1},))
# precompile(Base._setindex!, (Base.Dict{Symbol, Array{Symbol, 1}}, Array{Symbol, 1}, Symbol, Int64,))
# precompile(Base.vcat, (Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1},))
# precompile(Base.show_datatype, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, DataType,))
# precompile(Base.Random.shuffle!, (Base.Random.MersenneTwister, Array{Symbol, 1},))
# precompile(Base.throw_boundserror, (Array{Int64, 1}, Tuple{Base.UnitRange{Int64}},))
# precompile(Base.finalizer, (Any, Any,))
# precompile(Base._setindex!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Array{Symbol, 1}, String, Int64,))
# precompile(Base.vcat, (Array{Any, 1}, Array{Any, 1},))
# precompile(Base.copy!, (Array{Any, 1}, Tuple{Base.Pair{Symbol, Float64}, Tuple{Symbol, String}},))
# precompile(Base.join, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, String,))
# precompile(Base.read, (Base.PipeEndpoint, Type{Char},))
# precompile(Base.copy!, (Array{Int64, 1}, Tuple{Int64},))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Int64,))
# precompile(Base.print, (Base.TTY, String, Char,))
# precompile(Base.Dates.hour, (Base.Dates.DateTime,))
# precompile(Base.collect_to!, (Array{Float64, 1}, Base.Generator{Base.FloatRange{Float64},typeof( Base.cos)}, Int64, Int64,))
# precompile(Base.Dates.second, (Base.Dates.DateTime,))
# precompile(Base.repl_color, (String, Symbol,))
# precompile(Base.dims2string, (Tuple{},))
# precompile(Base.readuntil, (Base.PipeEndpoint, Char,))
# precompile(Base.Serializer.serialize_mod_names, (Base.Serializer.SerializationState{Base.Pipe}, Module,))
# precompile(Base.isless, (Tuple{UInt8, UInt8, UInt8, UInt8}, Tuple{UInt8, UInt8, UInt8, UInt8},))
# precompile(Base.Broadcast._broadcast!, ())
# precompile(Base.show, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Module,))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Month}, Base.Dates.DateTime, String,))
# precompile(Base.unsafe_copy!, (Array{Int64, 1}, Int64, Array{Int64, 0}, Int64, Int64,))
# precompile(Base.ind2sub!, (Array{Int64, 1}, Tuple{Int64}, Int64,))
# precompile(Base.Serializer.serialize_typename, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
# precompile(Base.print, (Base.IOStream, String, Char,))
# precompile(Base.Broadcast.check_broadcast_shape, (Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}},))
# precompile(Base.fill!, (Array{Bool, 0}, Bool,))
# precompile(Base.vect, (Base.Pair{Symbol, Float64},))
# precompile(Base.mapfoldl_impl, (typeof( Base.identity),typeof( Base.scalarmax), Int64, Tuple{Int64, Int64}, Int64,))
# precompile(Base.promote_typeof, (Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String},))
# precompile(Base.vcat, (Symbol, Symbol, Symbol,))
# precompile(Base.uvfinalize, (Base.PipeEndpoint,))
# precompile(Base.Dates.format, (Base.Dates.DateTime, Base.Dates.DateFormat,))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Bool,))
# precompile(Base._uv_hook_close, (Base.Process,))
# precompile(Base.copy!, (Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64,))
# precompile(Base._delete!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Int64,))
# precompile(Base.print, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Module, Char,))
# precompile(Base.mapfoldl, (typeof( Base.identity), Function, Tuple{Int64, Int64},))
# precompile(Base.Libc.Type, (Type{Base.Libc.TmStruct}, Int64,))
# precompile(Base.fill!, (Array{Int32, 1}, Int64,))
# precompile(Base.insert!, (Array{Base.Pair, 1}, Int64, Base.Pair{Tuple{UInt8, UInt8, UInt8, UInt8}, Symbol},))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Any,))
# precompile(Base.fld1, (Int64, Int64,))
# precompile(Base.exponent_bias, (Type{Float64},))
# precompile(Base.Serializer.serialize_type_data, (Base.Serializer.SerializationState{Base.Pipe}, DataType, Bool,))
# precompile(Base.redir_err, (Base.Cmd, Base.TTY,))
# precompile(Base.uvfinalize, (Base.Process,))
# precompile(Base.join, (Array{Symbol, 1}, String,))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Year}, Base.Dates.DateTime, String,))
# precompile(Base.vect, (Base.Pair{Symbol, Base.VersionNumber},))
# precompile(Base.disassociate_julia_struct, (Base.Timer,))
# precompile(Base.similar, (Array{Symbol, 1}, Type{Base.VersionNumber}, Tuple{Base.OneTo{Int64}},))
# precompile(Base.spawn_opts_swallow, (Tuple{Base.Pipe, Base.TTY, Base.TTY},))
# precompile(Base.warn, (Base.TTY, String,))
# precompile(Base.vcat, (Array{Int64, 0}, Array{Int64, 1},))
# precompile(Base.indexed_next, (Tuple{Symbol, Base.Sort.MergeSortAlg}, Int64, Int64,))
# precompile(Base.indexed_next, (Base.Pair{Symbol, Base.VersionNumber}, Int64, Int64,))
# precompile(Base.indexed_next, (Tuple{Symbol, Base.VersionNumber}, Int64, Int64,))
# precompile(Base.vect, (Base.Pair{Symbol, Float64},))
# precompile(Base.indexed_next, (Tuple{Tuple{UInt8, UInt8, UInt8, UInt8}, String}, Int64, Int64,))
# precompile(Base.print_with_color, (Symbol, Base.TTY, String,))
# precompile(Base.indexed_next, (Tuple{Symbol, Float64}, Int64, Int64,))
# precompile(Base.println_with_color, (Symbol, Base.TTY, String,))
# precompile(Base.similar, (Array{Any, 1}, Tuple{Int64},))
# precompile(Base.significand_bits, (Type{Float64},))
# precompile(Base.exponent_bits, (Type{Float64},))
# precompile(Base.indexed_next, (Base.Pair{Symbol, Float64}, Int64, Int64,))
# precompile(Base.repeated, (Array{Any, 1}, Int64,))
# precompile(Base.Type, (Type{Base.Pair}, Tuple{UInt8, UInt8, UInt8, UInt8}, Symbol,))
# precompile(Base.indexed_next, (Base.Pair{Symbol, Int64}, Int64, Int64,))
# precompile(Base.maximum, (Tuple{Int64, Int64},))
# precompile(Base.println, (Base.IOStream, String,))
# precompile(Base.print, (Base.IOStream, Char,))
# precompile(Base.collect, (Base.Generator{Base.LinSpace{Float64},typeof( Base.sin)},))
# precompile(Base.getindex, (Tuple{Symbol, Base.VersionNumber}, Int64,))
# precompile(Base.promote_typeof, (Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64},))
# precompile(Base.getindex, (Tuple{Array{Int64, 0}, Array{Int64, 1}}, Int64,))
# precompile(Base.arg_gen, (Base.Cmd,))
# precompile(Base.Dates.now, ())
# precompile(Base._collect, (Array{Base.StackTraces.StackFrame, 1}, Base.Generator{Array{Base.StackTraces.StackFrame, 1},typeof( Base.println)}, Base.EltypeUnknown, Base.HasShape,))
# precompile(Base.promote_typeof, (Base.Pair{Symbol, String}, Base.Pair{Symbol, String},))
# precompile(Base.setindex!, (Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64},))
# precompile(Base.length, (Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8},))
# precompile(Base.length, (Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8},))
# precompile(Base.fill!, (Array{Float64, 2}, Float64,))
# precompile(Base.promote_type, (Type{Base.Pair{Symbol, String}}, Type{Base.Pair{Symbol, Int64}},))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Module,))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{UInt8, 1},))
# precompile(Base.collect, (Base.Generator{Base.FloatRange{Float64},typeof( Base.cos)},))
# precompile(Base.promote_result, (Type{Base.Pair{Symbol, String}}, Type{Base.Pair{Symbol, Int64}}, Type{Union{}}, Type{Union{}},))
# precompile(Base.readuntil, (Base.PipeEndpoint, UInt8,))
# precompile(Base.identity, (Array{Float64, 1},))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Day}, Base.Dates.DateTime, String,))
# precompile(Base.ht_keyindex2, (Base.Dict{Symbol, Array{Symbol, 1}}, Symbol,))
# precompile(Base.print, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Module,))
# precompile(Base.ht_keyindex2, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, String,))
# precompile(Base.collect, (Tuple{Int64},))
# precompile(Base.getindex, (Base.Dict{String, Int32}, String,))
# precompile(Base.setindex!, (Array{Int64, 1}, Array{Int64, 0}, Base.UnitRange{Int64},))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Minute}, Base.Dates.DateTime, String,))
# precompile(Base.lcm, (Int64, Int64,))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Hour}, Base.Dates.DateTime, String,))
# precompile(Base._uv_hook_close, (Base.Timer,))
# precompile(Base.Dates.slotformat, (Base.Dates.DelimitedSlot{Base.Dates.Second}, Base.Dates.DateTime, String,))
# precompile(Base.setindex!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Array{Symbol, 1}, String,))
# precompile(Base.write, (Base.Pipe, UInt64,))
# precompile(Base.setindex!, (Base.Dict{Symbol, Any}, Tuple{Tuple{UInt8, UInt8, UInt8, UInt8}, Array{String, 1}}, Symbol,))
# precompile(Base.setindex!, (Base.Dict{Symbol, Any}, Tuple{Tuple{UInt8, UInt8, UInt8, UInt8}, String}, Symbol,))
# precompile(Base.throw_setindex_mismatch, (Array{Int64, 0}, Tuple{Int64},))
# precompile(Base.setindex_shape_check, (Array{Int64, 1}, Int64,))
# precompile(Base.setindex!, (Base.Dict{String, Union{Symbol, Array{Symbol, 1}}}, Symbol, String,))
# precompile(Base.setindex!, (Base.Dict{Symbol, Any}, Int64, Symbol,))
# precompile(Base.setindex!, (Base.Dict{Symbol, Array{Symbol, 1}}, Array{Symbol, 1}, Symbol,))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
# precompile(Base.Serializer.serialize_array_data, (Base.Pipe, Array{UInt8, 1},))
# precompile(Base.linspace, (Float64, Float64, Int64,))
# precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
# precompile(Base.getindex, (Tuple{Symbol}, Base.UnitRange{Int64},))
# precompile(Base.getindex, (Tuple{Int64}, Base.UnitRange{Int64},))
# precompile(Base.show, (Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, DataType,))
# precompile(Base.readline, (Base.PipeEndpoint,))
# precompile(ColorTypes.base_colorant_type, ())
# precompile(Core.Inference.specialize_method, (Method, Any, SimpleVector, Bool,))
# precompile(DataStructures._tablesz, (Int64,))
# precompile(FixedPointNumbers.convert, (Type{Float64}, FixedPointNumbers.Fixed{Int16, 15},))
# precompile(Weber.SDL_GetError, ())
# precompile(Weber.play, (Weber.Sound, Bool,))
# precompile(Weber.visual, (Weber.SDLWindow, Int64, Int64, Weber.SDLFont, ColorTypes.RGB{FixedPointNumbers.UFixed{UInt8, 8}}, UInt32, String, Int64, Float64,))
# precompile(Weber.clear, (Weber.SDLWindow, ColorTypes.RGB{FixedPointNumbers.UFixed{UInt8, 8}},))
# precompile(Weber.as_screen_coordinates, (Weber.SDLWindow, Int64, Float64, Int32, Int32,))
# precompile(Weber.findkwd, (Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}, Tuple{Symbol, Symbol}, Tuple{Symbol, String}}, Symbol, String,))
# precompile(Weber.save_display, (Weber.SDLWindow,))
# precompile(Weber.update_stack_helper, (Weber.SDLWindow, DataStructures.OrderedSet{Weber.SDLRendered}, Weber.SDLText,))
# precompile(Weber.findkwd, (Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}}, Symbol, String,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Array{Weber.SimpleMoment, 1},))
# precompile(Weber.findkwd, (Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}, Tuple{Symbol, String}}, Symbol, String,))
# precompile(Weber.findkwd, (Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}}, Symbol, String,))
# precompile(Weber.find_font, (String, Array{String, 1},))
# precompile(Weber.addbreak_every, (Int64, Int64, Int32, String,))
# precompile(Weber.process, (Weber.ExperimentState, Weber.MomentQueue, Float64,))
# precompile(Weber.draw, (Weber.SDLWindow, Weber.SDLText,))
# precompile(Weber.watch_pauses, (Weber.ExperimentState, Weber.KeyDownEvent,))
# precompile(Weber.get_experiment, ())
# precompile(Weber.watch_pauses, (Weber.ExperimentState, Weber.KeyUpEvent,))
# precompile(Weber.watch_pauses, (Weber.ExperimentState, Weber.WindowFocused,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Array{Weber.TimedMoment, 1},))
# precompile(Weber.addmoment, (Weber.MomentQueue, Array{Any, 1},))
# precompile(Weber.handle, (Weber.ExperimentState, Weber.CompoundMoment, Float64,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Weber.TimedMoment, Base.Take{Base.Repeated{Array{Weber.TimedMoment, 1}}}},))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Weber.TimedMoment, Weber.ResponseMoment},))
# precompile(Weber.check_timing, (Weber.ExperimentState, Weber.CompoundMoment, Float64, Float64,))
# precompile(Weber.visual, (Weber.SDLWindow, Int64, Int64, Weber.SDLFont, ColorTypes.RGB{FixedPointNumbers.UFixed{UInt8, 8}}, UInt32, String, Int64, Int64,))
# precompile(Weber.reset_response, ())
# precompile(Weber.process, (Weber.ExperimentState, Weber.MomentQueue, Weber.KeyUpEvent,))
# precompile(Weber.check_timing, (Weber.ExperimentState, Weber.TimedMoment, Float64, Float64,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Array{Weber.SimpleMoment, 1}},))
# precompile(Weber.run, (Weber.Experiment,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Function,))
# precompile(Weber.process, (Weber.ExperimentState, Weber.MomentQueue, Weber.KeyDownEvent,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Array{Any, 1}},))
# precompile(Weber.handle, (Weber.ExperimentState, Weber.ResponseMoment, Weber.KeyDownEvent,))
# precompile(Weber.setup_sound, ())
# precompile(Weber.handle, (Weber.ExperimentState, Weber.OffsetStartMoment, Float64,))
# precompile(Weber.handle, (Weber.ExperimentState, Weber.TimedMoment, Float64,))
# precompile(Weber.handle, (Weber.ExperimentState, Weber.ResponseMoment, Weber.KeyUpEvent,))
# precompile(Weber.record_helper, (Weber.ExperimentState, Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}, Tuple{Symbol, Symbol}, Tuple{Symbol, String}}, Array{Symbol, 1},))
# precompile(Weber.silence, (Float64,))
# precompile(Weber.as_screen_coordinates, (Weber.SDLWindow, Int64, Int64, Int32, Int32,))
# precompile(Weber.addtrial, (Array{Any, 1},))
# precompile(Weber.check_timing, (Weber.ExperimentState, Weber.OffsetStartMoment, Float64, Float64,))
# precompile(Weber.record_helper, (Weber.ExperimentState, Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}, Tuple{Symbol, String}}, Array{Symbol, 1},))
# precompile(Weber.keep_skipping, (Weber.ExperimentState, Weber.CompoundMoment,))
# precompile(Weber.record_helper, (Weber.ExperimentState, Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Tuple{Symbol, Float64}}, Array{Symbol, 1},))
# precompile(Weber.findkwd, (Array{Any, 1}, Symbol, String,))
# precompile(Weber.await_response, (Function,))
# precompile(Weber.init_events, ())
# precompile(Weber.tone, (Float64, Float64,))
# precompile(Weber.visual, (Weber.SDLWindow, Int64, Float64, Weber.SDLFont, ColorTypes.RGB{FixedPointNumbers.UFixed{UInt8, 8}}, UInt32, String, Float64, Int64,))
# precompile(Weber.tone, (Int64, Float64,))
# precompile(Weber.handle_remove, (Reactive.Signal{Weber.SDLRendered}, Weber.SDLCompound,))
# precompile(Weber.update_stack_helper, (Weber.SDLWindow, DataStructures.OrderedSet{Weber.SDLRendered}, Weber.SDLCompound,))
# precompile(Weber.keep_skipping, (Weber.ExperimentState, Weber.OffsetStartMoment,))
# precompile(Weber.tone, (Int64, Int64,))
# precompile(Weber.record_helper, (Weber.ExperimentState, Tuple{Base.Pair{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Tuple{Symbol, String}, Tuple{Symbol, String}, Tuple{Symbol, Base.VersionNumber}, Base.Pair{Symbol, String}}, Array{Symbol, 1},))
# precompile(Weber.delta_t, (Weber.ResponseMoment,))
# precompile(Weber.ramp, (SampledSignals.SampleBuf{Float64, 1}, Float64,))
# precompile(Weber.addbreak, (Weber.ExperimentState, Weber.TimedMoment,))
# precompile(Weber.Type, (Type{Weber.SDLClear}, ColorTypes.RGB{FixedPointNumbers.UFixed{UInt8, 8}}, Int64, Float64,))
# precompile(Weber.match_lengths, (SampledSignals.SampleBuf{Float64, 1},))
# precompile(Weber.addbreak, (Weber.ExperimentState, Array{Weber.SimpleMoment, 1},))
# precompile(Weber.close, (Weber.SDLWindow,))
# precompile(Weber.keep_skipping, (Weber.ExperimentState, Weber.ResponseMoment,))
# precompile(Weber.addmoments, (Weber.ExperimentState, Array{Any, 1},))
# precompile(Weber.keep_skipping, (Weber.ExperimentState, Weber.TimedMoment,))
# precompile(Weber.sound, (SampledSignals.SampleBuf{Float64, 1},))
# precompile(Weber.display_duration, (Weber.SDLText,))
# precompile(Weber.process, (Weber.ExperimentState, Weber.MomentQueue, Weber.EmptyEvent,))
# precompile(Weber.play, (SampledSignals.SampleBuf{Float64, 1},))
# precompile(Weber.addmoment, (Weber.MomentQueue, Weber.TimedMoment,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Weber.ResponseMoment,))
# precompile(Weber.watch_pauses, (Weber.ExperimentState, Weber.EmptyEvent,))
# precompile(Weber.display_priority, (Weber.SDLText,))
# precompile(Weber.update_last, (Weber.ResponseMoment,))
# precompile(Weber.delta_t, (Weber.TimedMoment,))
# precompile(Weber.draw, (Weber.SDLWindow, Weber.SDLClear,))
# precompile(Weber.setup_display, ())
# precompile(Weber.moment, (Float64,))
# precompile(Weber.ramp, (SampledSignals.SampleBuf{Float64, 1},))
# precompile(Weber.Type, (Type{Weber.CompoundMoment}, Array{Weber.Moment, 1},))
# precompile(Weber.display_priority, (Weber.SDLClear,))
# precompile(Weber.attenuate, (SampledSignals.SampleBuf{Float64, 1}, Int64,))
# precompile(Weber.display, (Weber.SDLWindow, Weber.SDLText,))
# precompile(Weber.display, (Weber.SDLWindow, Weber.SDLCompound,))
# precompile(Weber.restore_display, (Weber.SDLWindow,))
# precompile(Weber.unpause, (Weber.ExperimentState, Float64,))
# precompile(Weber.record_header, (Weber.ExperimentState,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Weber.CompoundMoment,))
# precompile(Weber.handle_remove, (Reactive.Signal{Weber.SDLRendered}, Weber.SDLClear,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Base.Take{Base.Repeated{Array{Weber.TimedMoment, 1}}},))
# precompile(Weber.addmoment, (Weber.MomentQueue, Base.Take{Base.Repeated{Array{Any, 1}}},))
# precompile(Weber.handle_remove, (Reactive.Signal{Weber.SDLRendered}, Weber.SDLText,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Array{Weber.SimpleMoment, 1}, Array{Weber.SimpleMoment, 1}},))
# precompile(Weber.sound, (SampledSignals.SampleBuf{FixedPointNumbers.Fixed{Int16, 15}, 1},))
# precompile(Weber.addmoment, (Weber.MomentQueue, Tuple{Base.Take{Base.Repeated{Array{Any, 1}}}},))
# precompile(Weber.skip_offsets, (Weber.ExperimentState, Weber.MomentQueue,))
# precompile(Weber.pause, (Weber.ExperimentState, String, Float64, Bool,))
# precompile(Weber.addmoment, (Weber.MomentQueue, Weber.OffsetStartMoment,))
# end
